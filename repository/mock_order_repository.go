// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "go-transaction/model"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: ctx, data
func (_m *MockOrderRepository) AddOrder(ctx context.Context, data model.TOrder) (model.TOrder, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Order")
	}

	var r0 model.TOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.TOrder) (model.TOrder, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.TOrder) model.TOrder); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(model.TOrder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.TOrder) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrderItem provides a mock function with given fields: ctx, item
func (_m *MockOrderRepository) AddOrderItem(ctx context.Context, item model.TOrderItem) (model.TOrderItem, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderItem")
	}

	var r0 model.TOrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.TOrderItem) (model.TOrderItem, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.TOrderItem) model.TOrderItem); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(model.TOrderItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.TOrderItem) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MockOrderRepository) GetAll() ([]model.TOrder, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.TOrder
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.TOrder, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.TOrder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TOrder)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields:
func (_m *MockOrderRepository) Migrate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStock provides a mock function with given fields: ctx, productId, quantity
func (_m *MockOrderRepository) UpdateStock(ctx context.Context, productId uint, quantity uint) (model.TProduct, error) {
	ret := _m.Called(ctx, productId, quantity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStock")
	}

	var r0 model.TProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (model.TProduct, error)); ok {
		return rf(ctx, productId, quantity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) model.TProduct); ok {
		r0 = rf(ctx, productId, quantity)
	} else {
		r0 = ret.Get(0).(model.TProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, productId, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTrx provides a mock function with given fields: _a0
func (_m *MockOrderRepository) WithTrx(_a0 *gorm.DB) orderRepository {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithTrx")
	}

	var r0 orderRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) orderRepository); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(orderRepository)
	}

	return r0
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
